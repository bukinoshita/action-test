name: rsnd
on:
  push:
    branches:
      - main
  pull_request:
jobs:
  lint:
    runs-on: ubuntu-latest
    container:
      image: node:18
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: buildjet/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install packages
        run: yarn

      - name: Run Lint
        run: yarn lint
  format:
    runs-on: ubuntu-latest
    container:
      image: node:18
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: buildjet/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install packages
        run: yarn

      - name: Run Format Check
        run: yarn format:check
  test:
    runs-on: ubuntu-latest

    container:
      image: node:18

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: buildjet/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase database
        run: supabase db start --debug

      - name: Install packages
        run: yarn

      - run: supabase status -o env >> $GITHUB_ENV
      - run: echo "$DB_URL"

      - name: Run Tests
        run: yarn test

  build:
    runs-on: ubuntu-latest
    container:
      image: node:18
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: buildjet/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install packages
        run: yarn

      - name: Run Build
        run: yarn build
  dependencies:
    runs-on: ubuntu-latest
    container:
      image: node:18
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check for pinned dependencies
        run: |
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
            const errors = [];

            function isPinned(version) {
              return /^\d+\.\d+\.\d+$|^[a-z]+:[a-z]+@\d+$/.test(version);
            }

            for (const [dep, version] of Object.entries(pkg.dependencies || {})) {
              if (!isPinned(version)) {
                errors.push(`Dependency "${dep}" is not pinned: "${version}"`);
              }
            }

            for (const [dep, version] of Object.entries(pkg.devDependencies || {})) {
              if (!isPinned(version)) {
                errors.push(`Dev dependency "${dep}" is not pinned: "${version}"`);
              }
            }

            if (errors.length > 0) {
              console.error(`\n${errors.join("\n")}\n`);
              process.exit(1);
            } else {
              console.log("All dependencies are pinned.");
            }
          '
